@page "/transmitters"
@using VideoMatrixSystem.Common
@using VideoMatrixSystem.Domain.Common
@using VideoMatrixSystem.Domain.Entities
@using VideoMatrixSystem.Infraestructure.UseCases
@inject GesVideoMatrix _gesVideoMatrix

<PageTitle>Transmisores</PageTitle>

<div class="receiver-page">

	<!--Filter dropdown-->
	<div class="filter-dropdown">
		<button class="filter-toggle" @onclick="() => showFilters = !showFilters">
			Filtrar por estado
		</button>

		@if (showFilters)
		{
			<div class="filter-options">
				@foreach (var state in StateFilters.Keys)
				{
					<label style="filter-options label">
						<input type="checkbox"
							   checked="@StateFilters[state]"
							   @onchange="(e) => OnFilterChanged(state, e.Value)" />
						@GetStatusName(state)
					</label>
				}
			</div>
		}
	</div>

	<!--Transmitter grid-->
	<div class="receiver-grid">
		@foreach (var transmitter in ViewModel.Transmitters.Where(r => StateFilters[r.State]))
		{
			<div class="receiver-card" @onclick="() => OpenModal(transmitter)">
				<h3 class="receiver-name">@transmitter.Name</h3>

				<img src="@GetTransmitterImage(transmitter)" class="receiver-image" />

				<div class="receiver-info">

					<span class="receiver-status">
						<span class="status-circle @GetStatusClass(transmitter.State)" />
						@GetStatusName(transmitter.State)
					</span>

					<p class="receiver-ip">IP: @transmitter.IP</p>
				</div>
			</div>
		}
	</div>

	<!--Transmitter modal-->
	@if (IsModalOpen && ViewModel.SelectedTransmitter != null)
	{
		<div class="modal-backdrop" @onclick="CloseModal">
			<div class="modal-content" @onclick:stopPropagation="true">
				<h2>@ViewModel.SelectedTransmitter.Name</h2>
				<p><strong>Estado:</strong> @GetStatusName(ViewModel.SelectedTransmitter.State)</p>
				<p><strong>IP:</strong> @ViewModel.SelectedTransmitter.IP</p>
				<img src="@GetTransmitterImage(ViewModel.SelectedTransmitter)" class="receiver-image" />

				<button @onclick="ToggleTransmitterState">
					@(ViewModel.SelectedTransmitter.State == DeviceState.Offline ? "Encender" : "Apagar")
				</button>

				<button @onclick="CloseModal">Cerrar</button>
			</div>
		</div>
	}

</div>

@code {
	private TransmitterPresentationVM ViewModel;

	private string defaultImageUrl = "https://www.shutterstock.com/image-vector/default-ui-image-placeholder-wireframes-600nw-1037719192.jpg";
	private string offlineImageUrl = "https://media.licdn.com/dms/image/v2/C4E12AQEHncNrCIkqNA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1520095517517?e=2147483647&v=beta&t=uV_huUri0E0Yib_a6NBG_-j4koK7Q2x9uJmB5gseakc";

	private bool showFilters = false;
	private bool IsModalOpen = false;

	private Dictionary<DeviceState, bool> StateFilters = new()
	{
		{ DeviceState.Active, true },
		{ DeviceState.StandBy, true },
		{ DeviceState.Offline, true }
	};	

	protected override void OnInitialized()
	{
		base.OnInitialized();

		ViewModel = new(_gesVideoMatrix);
	}

	public class TransmitterPresentationVM : ViewModelBase
	{
		public TransmitterPresentationVM(IAction GesVideoMatrix) : base(GesVideoMatrix)
		{
			Action("Transmitter_SelectTransmitter", -1);
			UpdateModel(OpResul.Range);
		}

		public List<TransmitterVM> Transmitters = new();
		public TransmitterVM? SelectedTransmitter;

		public class TransmitterVM
		{
			public int Id { get; set; }
			public string Name { get; set; } = null!;
			public string IP { get; set; } = null!;
			public string ImageUrl { get; set; } = null!;
			public DeviceState State { get; set; }

			public static explicit operator TransmitterVM(Transmitter transmitter)
			{
				if (transmitter == null)
				{
					return null;
				}

				return new TransmitterVM()
				{
					Id			= transmitter.Id,
					Name		= transmitter.Name,
					IP			= transmitter.IP,
					ImageUrl	= transmitter.ImageUrl,
					State		= transmitter.State,
				};
			}

			public override string ToString()
			{
				return $"ID: {Id}, Name: {Name}";
			}
		}

		public override void UpdateModel(OpResul dataResul)
		{
			var transmitterList = (List<Transmitter>)GetData("Transmitter_GetTransmitters");
			var selectedTransmitter = (Transmitter)GetData("Transmitter_GetSelectedTransmitter");

			Transmitters = transmitterList.Select(r => (TransmitterVM)r).ToList();
			SelectedTransmitter = (TransmitterVM)selectedTransmitter;
		}
	}

	#region GETTERS

	/// <summary>
	/// Returns the CSS class for the state of a device
	/// </summary>
	/// <param name="status">State of the device</param>
	/// <returns>A string containing the appropiate CSS class for the item</returns>
	private string GetStatusClass(DeviceState status)
	{
		if (status == DeviceState.None)
		{
			return nameof(DeviceState.Offline).ToLower();
		}

		return status.ToString().ToLower();
	}

	/// <summary>
	/// Returns the name of the state of a device
	/// </summary>
	/// <param name="status">State of the device</param>
	/// <returns>A string containing the device state name</returns>
	private string GetStatusName(DeviceState status)
	{
		return status switch
		{
			DeviceState.Active => "Activo",
			DeviceState.StandBy => "En espera",
			DeviceState.Offline => "Apagado",
			DeviceState.None => "Apagado",
			_ => "Desconocido"
		};
	}

	/// <summary>
	/// Returns the image URL for the transmitter based on its state.
	/// If the transmitter is offline, a predefined offline image is returned.
	/// Otherwise, it returns the transmitter image or a default placeholder.
	/// </summary>
	/// <param name="transmitter">The transmitter view model.</param>
	/// <returns>The image URL to display.</returns>
	private string GetTransmitterImage(TransmitterPresentationVM.TransmitterVM transmitter)
	{
		return transmitter?.ImageUrl ?? defaultImageUrl;
	}

	#endregion

	#region FILTER

	/// <summary>
	/// Updates the filter state for a specific device status based on the checkbox input.
	/// </summary>
	/// <param name="state">The device state to update in the filter.</param>
	/// <param name="checkedValue">The checkbox value indicating whether the state is included in the filter.</param>
	private void OnFilterChanged(DeviceState state, object? checkedValue)
	{
		if (checkedValue is bool isChecked)
		{
			StateFilters[state] = isChecked;
		}
	}

	#endregion

	#region MODAL

	/// <summary>
	/// Opens a modal displaying the selected receiver's information.
	/// </summary>
	/// <param name="receiver">The receiver to display in the modal.</param>
	private void OpenModal(TransmitterPresentationVM.TransmitterVM receiver)
	{
		ViewModel.Action("Transmitter_SelectTransmitter", receiver.Id);
		IsModalOpen = true;
	}

	/// <summary>
	/// Closes the receiver modal if it is currently open.
	/// </summary>
	private void CloseModal()
	{
		IsModalOpen = false;
		ViewModel.Action("Transmitter_SelectTransmitter", -1);
	}

	/// <summary>
	/// Turns the transmitter on or off.
	/// </summary>
	private void ToggleTransmitterState()
	{
		if (ViewModel.SelectedTransmitter == null)
			return;

		ViewModel.Action("Transmitter_SwitchState", ViewModel.SelectedTransmitter.Id);
	}
	#endregion
}
