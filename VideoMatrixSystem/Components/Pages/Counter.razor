@page "/counter"
@using VideoMatrixSystem.Common;
@using VideoMatrixSystem.Domain.Common
@using VideoMatrixSystem.Domain.Entities
@using VideoMatrixSystem.Infraestructure.UseCases
@inject GesVideoMatrix _gesVideoMatrix

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

@code {

    private TransmitterReceiverPairVM ViewModel;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ViewModel = new(_gesVideoMatrix);
    }

    public class TransmitterReceiverPairVM : ViewModelBase
    {
        public TransmitterReceiverPairVM(IAction GesVideoMatrix) : base(GesVideoMatrix)
        {
            var aaa = GetData("Transmitter_GetTransmitters");
        }

        public List<TransmitterVM> Transmitters = new();
        public List<ReceiverVM> receivers = new();

        public class TransmitterVM()
        {
            private int Id { get; set; }
            public string Name { get; set; } = null!;
            public string IP { get; set; } = null!;
            public string ImageURL { get; set; } = null!;
            public DeviceState State{ get; set; }
            public List<ReceiverVM> Receivers { get; set; } = new();

            public static explicit operator TransmitterVM(Transmitter transmitter)
            {
                return new TransmitterVM()
                {
                    Id          = transmitter.Id,
                    Name        = transmitter.Name,
                    IP          = transmitter.IP,
                    ImageURL    = transmitter.ImageUrl,
                    State       = transmitter.State,
                    Receivers   = transmitter.Receivers
                                    .Select(r => (ReceiverVM)r)
                                    .ToList()
                };
            }
        }

        public class ReceiverVM()
        {
            private int Id { get; set; }
            public string Name { get; set; } = null!;
            public string IP { get; set; } = null!;
            public string ImageURL { get; set; } = null!;
            public DeviceState State{ get; set; }

            public static explicit operator ReceiverVM(Receiver receiver)
            {
                return new ReceiverVM()
                {
                    Id          = receiver.Id,
                    Name        = receiver.Name,
                    IP          = receiver.IP,
                    ImageURL    = receiver.ImageUrl,
                    State       = receiver.State
                };
            }
        }

        public override void UpdateModel(OpResul dataResul)
        {
            
        }
    }
}
