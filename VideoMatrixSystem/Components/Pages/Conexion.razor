@page "/conexion"
@using VideoMatrixSystem.Common;
@using VideoMatrixSystem.Domain.Common
@using VideoMatrixSystem.Domain.Entities
@using VideoMatrixSystem.Infraestructure.UseCases
@inject GesVideoMatrix _gesVideoMatrix

@using Syncfusion.Blazor.Buttons

<PageTitle>Conexion</PageTitle>

<div class="page-container">

    <!--Transmitter table-->
    <div class="table-container">
        <h3 class="section-title section-title-blue">Transmisores</h3>

        <div class="status-legend">
            <div><span class="status-circle active"></span> Activo</div>
            <div><span class="status-circle standby"></span> Espera</div>
            <div><span class="status-circle offline"></span> Desactivado</div>
        </div>

        <div class="grid-container">
            @foreach (var item in ViewModel.Transmitters)
            {
                <SfButton CssClass="@GetButtonClass(item)" @onclick="() => SelectTransmitter(item)">
                    <strong>@item.Name</strong>
                </SfButton>
            }
        </div>
    </div>

    <!--Separator-->
    <div class="separator"/>

    <!--Receiver table-->
    <div class="table-container">
        <h3 class="section-title section-title-orange">Receptores</h3>

        <div class="status-legend">
            <div><span class="status-circle active"></span> Activo</div>
            <div><span class="status-circle standby"></span> Espera</div>
            <div><span class="status-circle offline"></span> Desactivado</div>
        </div>

        <div class="grid-container">
            @foreach (var item in ViewModel.Receivers)
            {
                <SfButton CssClass="e-primary device-item receiver">
                    <strong>@item.Name</strong>
                </SfButton>
            }
        </div>
    </div>
</div>

@code {
    private TransmitterReceiverPairVM ViewModel;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ViewModel = new(_gesVideoMatrix);
    }

    public class TransmitterReceiverPairVM : ViewModelBase
    {
        public TransmitterReceiverPairVM(IAction GesVideoMatrix) : base(GesVideoMatrix)
        {
            UpdateModel(OpResul.Range);
        }

        public TransmitterVM SelectedTransmitter;
        public ReceiverVM SelectedReceiver;
        public List<TransmitterVM> Transmitters = new();
        public List<ReceiverVM> Receivers = new();

        public class TransmitterVM()
        {
            private int Id { get; set; }
            public string Name { get; set; } = null!;
            public string IP { get; set; } = null!;
            public string ImageURL { get; set; } = null!;
            public DeviceState State{ get; set; }
            public List<ReceiverVM> Receivers { get; set; } = new();

            public static explicit operator TransmitterVM(Transmitter transmitter)
            {
                return new TransmitterVM()
                {
                    Id          = transmitter.Id,
                    Name        = transmitter.Name,
                    IP          = transmitter.IP,
                    ImageURL    = transmitter.ImageUrl,
                    State       = transmitter.State,
                    Receivers   = transmitter.Receivers
                                    .Select(r => (ReceiverVM)r)
                                    .ToList()
                };
            }

            public override string ToString()
            {
                return $"ID: {Id}, Name: {Name}";
            }
        }

        public class ReceiverVM()
        {
            private int Id { get; set; }
            public string Name { get; set; } = null!;
            public string IP { get; set; } = null!;
            public string ImageURL { get; set; } = null!;
            public DeviceState State{ get; set; }

            public static explicit operator ReceiverVM(Receiver receiver)
            {
                return new ReceiverVM()
                {
                    Id          = receiver.Id,
                    Name        = receiver.Name,
                    IP          = receiver.IP,
                    ImageURL    = receiver.ImageUrl,
                    State       = receiver.State
                };
            }

            public override string ToString()
            {
                return $"ID: {Id}, Name: {Name}";
            }
        }

        public override void UpdateModel(OpResul dataResul)
        {
            var transmitterList = (List<Transmitter>)GetData("Transmitter_GetTransmitters");
            var receiverList = (List<Receiver>)GetData("Receiver_GetReceivers");

            Transmitters = transmitterList.Select(t => (TransmitterVM)t).ToList();
            Receivers = receiverList.Select(r => (ReceiverVM)r).ToList();
        }
    }

    #region Actions

    public void SelectTransmitter(TransmitterReceiverPairVM.TransmitterVM transmitter)
    {
        ViewModel.SelectedTransmitter = transmitter;
    }

    private string GetButtonClass(TransmitterReceiverPairVM.TransmitterVM item)
    {
        var baseClass = "e-primary device-item";
        if (ViewModel.SelectedTransmitter != null && ViewModel.SelectedTransmitter == item)
            return baseClass + " selected";
        return baseClass;
    }

    #endregion
}
