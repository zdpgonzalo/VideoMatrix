@page "/"
@using VideoMatrixSystem.Common
@using VideoMatrixSystem.Domain.Common
@using VideoMatrixSystem.Domain.Entities
@using VideoMatrixSystem.Infraestructure.UseCases
@inject GesVideoMatrix _gesVideoMatrix

<PageTitle>Receptores</PageTitle>

<div class="receiver-page">

	<!--Filters + Create buttons-->
	<div style="display: flex; align-items: center; margin-bottom: 1rem; gap: 1rem;">

		<!--Filter dropdown-->
		<div class="filter-dropdown">
			<button class="filter-toggle" @onclick="() => showFilters = !showFilters">
				Filtrar por estado
			</button>

			@if (showFilters)
			{
				<div class="filter-options">
					@foreach (var state in StateFilters.Keys)
					{
						<label>
							<input type="checkbox"
								   checked="@StateFilters[state]"
								   @onchange="(e) => OnFilterChanged(state, e.Value)" />
							@GetStatusName(state)
						</label>
					}
				</div>
			}
		</div>

		<!--CreateButton-->
		<button class="create-button" @onclick="OpenCreateModal" style="margin-bottom: 0.5rem;">
			Crear
		</button>

	</div>

	<!--Receiver grid-->
	<div class="receiver-grid">
		@foreach (var receiver in ViewModel.Receivers.Where(r => StateFilters[r.State]))
		{
			<div class="receiver-card" @onclick="() => OpenModal(receiver)">
				<h3 class="receiver-name">@receiver.Name</h3>

				<img src="@GetReceiverImage(receiver)" class="receiver-image" />

				<div class="receiver-info">

					<span class="receiver-status">
						<span class="status-circle @GetStatusClass(receiver.State)"/>
						@GetStatusName(receiver.State)
					</span>

					<p class="receiver-ip">IP: @receiver.IP</p>
				</div>
			</div>
		}
	</div>

	<!--Receiver modal-->
	@if (IsModalOpen && ViewModel.SelectedReceiver != null)
	{
		<div class="modal-backdrop" @onclick="CloseModal">
			<div class="modal-content" @onclick:stopPropagation="true">

				<!--Header info-->
				<div style="display: flex; justify-content: space-between; align-items: center;">
					<h2>@ViewModel.SelectedReceiver.Name</h2>
					<button @onclick="DeleteReceiver" class="delete-button" title="Eliminar receptor" style="background: none; border: none; cursor: pointer;">
						<img class="delete-icon" src="delete.png" alt="Eliminar" />
					</button>
				</div>

				<p><strong>Estado:</strong> @GetStatusName(ViewModel.SelectedReceiver.State)</p>
				<p><strong>IP:</strong> @ViewModel.SelectedReceiver.IP</p>
				<img src="@GetReceiverImage(ViewModel.SelectedReceiver)" class="receiver-image" />

				<!--Switch state button-->
				<button @onclick="ToggleReceiverState">
					@(ViewModel.SelectedReceiver.State == DeviceState.Offline ? "Encender" : "Apagar")
				</button>

				<!-- Botón + selector transmisor -->
				<div class="transmitter-selector">
					<label for="transmitterSelect"><strong>Transmisor: </strong></label>
					<select id="transmitterSelect" @bind="SelectedTransmitterId">
						<option disabled selected value="">Selecciona un transmisor</option>
						@foreach (var transmitter in ViewModel.Transmitters)
						{
							<option value="@transmitter.Id">@transmitter.Name</option>
						}
					</select>
				</div>

				<button @onclick="CloseModal">Cerrar</button>
			</div>
		</div>
	}

	<!--Create modal-->
	@if (IsCreateModalOpen)
	{
		<div class="modal-backdrop" @onclick="CloseCreateModal">
			<div class="modal-content" @onclick:stopPropagation="true">

				<!--Header-->
				<h2>Crear Transmisor</h2>

				<div style="display: flex;flex-direction: column;gap:5px;">
					<div class="form-row">
						<label><strong>Nombre:</strong></label>
						<input type="text" @bind="newReceiver.Name" />
					</div>

					<div class="form-row">
						<label><strong>IP:</strong></label>
						<input type="text" @bind="newReceiver.IP" />
					</div>
				</div>

				<!--Buttons-->
				<div style="margin-top: 1rem;">
					<button @onclick="CreateReceiver">Guardar</button>
					<button @onclick="CloseCreateModal">Cancelar</button>
				</div>

			</div>
		</div>
	}

</div>

@code {
	private ReceiverPresentationVM ViewModel;

	private string defaultImageUrl = "https://www.shutterstock.com/image-vector/default-ui-image-placeholder-wireframes-600nw-1037719192.jpg";
	private string offlineImageUrl = "https://media.licdn.com/dms/image/v2/C4E12AQEHncNrCIkqNA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1520095517517?e=2147483647&v=beta&t=uV_huUri0E0Yib_a6NBG_-j4koK7Q2x9uJmB5gseakc";

	private bool showFilters = false;
	private bool IsModalOpen = false;

	private Dictionary<DeviceState, bool> StateFilters = new()
	{
		{ DeviceState.Active, true },
		{ DeviceState.StandBy, true },
		{ DeviceState.Offline, true }
	};	

	private string? selectedTransmitterId;
	private string? SelectedTransmitterId
	{
		get => ViewModel.SelectedReceiver.Transmitter?.Id.ToString();
		set
		{
			selectedTransmitterId = value;
			if (int.TryParse(value, out var id))
			{
				var transmitter = ViewModel.Transmitters.FirstOrDefault(t => t.Id == id);
				if (transmitter != null)
				{
					ViewModel.Action("Receiver_ChangeReceiverTransmitter", ViewModel.SelectedReceiver?.Id, transmitter?.Id);
				}
			}
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		ViewModel = new(_gesVideoMatrix);
	}

	public class ReceiverPresentationVM : ViewModelBase
	{
		public ReceiverPresentationVM(IAction GesVideoMatrix) : base(GesVideoMatrix)
		{
			Action("Receiver_SelectReceiver", -1);
			UpdateModel(OpResul.Range);
		}

		public List<ReceiverVM> Receivers = new();
		public List<TransmitterVM> Transmitters = new();
		public ReceiverVM? SelectedReceiver;

		public class ReceiverVM
		{
			public int Id { get; set; }
			public string Name { get; set; } = null!;
			public string IP { get; set; } = null!;
			public DeviceState State { get; set; }
			public Transmitter? Transmitter { get; set; } = null!;

			public static explicit operator ReceiverVM(Receiver receiver)
			{
				if(receiver == null)
				{
					return null;
				}

				return new ReceiverVM()
				{
					Id			= receiver.Id,
					Name		= receiver.Name,
					IP			= receiver.IP,
					State		= receiver.State,
					Transmitter = receiver.Transmitter
				};
			}

			public override string ToString()
			{
				return $"ID: {Id}, Name: {Name}";
			}
		}

		public class TransmitterVM
		{
			public int Id { get; set; }
			public string Name { get; set; } = null!;

			public static explicit operator TransmitterVM(Transmitter transmitter)
			{
				if(transmitter == null)
				{
					return null;
				}

				return new TransmitterVM()
				{
					Id			= transmitter.Id,
					Name		= transmitter.Name,
				};
			}

			public override string ToString()
			{
				return $"ID: {Id}, Name: {Name}";
			}
		}

		public override void UpdateModel(OpResul dataResul)
		{
			var receiverList = (List<Receiver>)GetData("Receiver_GetReceivers");
			var transmitterList = (List<Transmitter>)GetData("Transmitter_GetTransmitters");
			var selectedReceiver = (Receiver)GetData("Receiver_GetSelectedReceiver");

			Receivers = receiverList.Select(r => (ReceiverVM)r).ToList();
			Transmitters = transmitterList.Select(t => (TransmitterVM)t).ToList();
			SelectedReceiver = (ReceiverVM)selectedReceiver;
		}
	}

	#region GETTERS

	/// <summary>
	/// Returns the CSS class for the state of a device
	/// </summary>
	/// <param name="status">State of the device</param>
	/// <returns>A string containing the appropiate CSS class for the item</returns>
	private string GetStatusClass(DeviceState status)
	{
		if (status == DeviceState.None)
		{
			return nameof(DeviceState.Offline).ToLower();
		}

		return status.ToString().ToLower();
	}

	/// <summary>
	/// Returns the name of the state of a device
	/// </summary>
	/// <param name="status">State of the device</param>
	/// <returns>A string containing the device state name</returns>
	private string GetStatusName(DeviceState status)
	{
		return status switch
		{
			DeviceState.Active => "Activo",
			DeviceState.StandBy => "En espera",
			DeviceState.Offline => "Apagado",
			DeviceState.None => "Apagado",
			_ => "Desconocido"
		};
	}

	/// <summary>
	/// Returns the image URL for the receiver based on its state.
	/// If the receiver is offline, a predefined offline image is returned.
	/// Otherwise, it returns the transmitter image or a default placeholder.
	/// </summary>
	/// <param name="receiver">The receiver view model.</param>
	/// <returns>The image URL to display.</returns>
	private string GetReceiverImage(ReceiverPresentationVM.ReceiverVM receiver)
	{
		if(receiver.State == DeviceState.Offline)
			return offlineImageUrl;

		if(receiver.Transmitter?.State == DeviceState.Offline)
		{
			return defaultImageUrl;
		}

		return receiver.Transmitter?.ImageUrl ?? defaultImageUrl;
	}

	#endregion

	#region FILTER

	/// <summary>
	/// Updates the filter state for a specific device status based on the checkbox input.
	/// </summary>
	/// <param name="state">The device state to update in the filter.</param>
	/// <param name="checkedValue">The checkbox value indicating whether the state is included in the filter.</param>
	private void OnFilterChanged(DeviceState state, object? checkedValue)
	{
		if (checkedValue is bool isChecked)
		{
			StateFilters[state] = isChecked;
		}
	}

	#endregion

	#region MODAL

	/// <summary>
	/// Opens a modal displaying the selected receiver's information.
	/// </summary>
	/// <param name="receiver">The receiver to display in the modal.</param>
	private void OpenModal(ReceiverPresentationVM.ReceiverVM receiver)
	{
		ViewModel.Action("Receiver_SelectReceiver", receiver.Id);
		IsModalOpen = true;
	}

	/// <summary>
	/// Closes the receiver modal if it is currently open.
	/// </summary>
	private void CloseModal()
	{
		IsModalOpen = false;
		ViewModel.Action("Receiver_SelectReceiver", -1);
	}

	/// <summary>
	/// Turns the receiver on or off.
	/// </summary>
	private void ToggleReceiverState()
	{
		if (ViewModel.SelectedReceiver == null)
			return;

		ViewModel.Action("Receiver_SwitchState", ViewModel.SelectedReceiver.Id);
	}

	/// <summary>
	/// Updates the transmitter of the receiver
	/// </summary>
	/// <param name="e"></param>
	private void OnTransmitterChange(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int transmitterId))
		{
			var selected = ViewModel.Transmitters.FirstOrDefault(t => t.Id == transmitterId);
			if (selected != null)
			{
				ViewModel.Action("Receiver_ChangeReceiverTransmitter", ViewModel.SelectedReceiver?.Id, selected?.Id);
			}
		}
	}

	/// <summary>
	/// Deletes the selected receiver from the database
	/// </summary>
	private void DeleteReceiver()
	{
		ViewModel.Action("Receiver_DeleteReceiver", ViewModel.SelectedReceiver?.Id);
		CloseModal();
	}
	#endregion

	#region Create receiver

	private bool IsCreateModalOpen = false;

	private ReceiverPresentationVM.ReceiverVM newReceiver = new();

	/// <summary>
	/// Opens the modal for creating a new transmitter
	/// </summary>
	private void OpenCreateModal()
	{
		IsCreateModalOpen = true;
		newReceiver = new();
	}

	/// <summary>
	/// Closes the create transmitter modal
	/// </summary>
	private void CloseCreateModal()
	{
		IsCreateModalOpen = false;
	}

	/// <summary>
	/// Calls the ViewModel to create a new transmitter with the entered data, then closes the modal
	/// </summary>
	/// <returns></returns>
	private async Task CreateReceiver()
	{
		await ViewModel.Action("Receiver_CreateReceiver", newReceiver.Name, newReceiver.IP);
		CloseCreateModal();
	}

	#endregion
}
